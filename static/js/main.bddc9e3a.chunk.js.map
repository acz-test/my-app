{"version":3,"sources":["logo.svg","mp3/gentlelaborer.mp3","mp3/mayonnaise.mp3","mp3/heartman.mp3","mp3/imagination.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","gentlelaborer","require","mayonnaise","heartman","imagination","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sequence","addSound","bind","assertThisInitialized","play","reset","event","setState","concat","target","id","i","length","arr","slice","getFile","audio","Audio","onended","console","log","src","num","react_default","a","createElement","className","onClick","map","j","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bddc9e3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/gentlelaborer.004f55b1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/mayonnaise.a7e70fc0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/heartman.789e2579.mp3\";","module.exports = __webpack_public_path__ + \"static/media/imagination.383a7eaf.mp3\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nlet gentlelaborer = require('./mp3/gentlelaborer.mp3');\nlet mayonnaise = require('./mp3/mayonnaise.mp3');\nlet heartman = require('./mp3/heartman.mp3');\nlet imagination = require('./mp3/imagination.mp3');\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequence: []\n    }\n    this.addSound = this.addSound.bind(this);\n    this.play = this.play.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  addSound(event) {\n    this.setState({\n      sequence: this.state.sequence.concat(event.target.id)\n    });\n  }\n\n  reset() {\n    this.setState({\n      sequence: []\n    });\n  }\n\n  play() {\n    var i = 1;\n    var length = this.state.sequence.length;\n    var arr = this.state.sequence.slice();\n    const getFile = this.getFile;\n    if (length > 0) {\n      var audio = new Audio(getFile(arr[0]));\n      audio.play();\n\n      audio.onended = function() {\n        if (i < length) {\n          console.log(this);\n          audio.src = getFile(arr[i]);\n          audio.play();\n          i++;\n        }\n      };\n    }\n  }\n\n  getFile(num) {\n    switch(num) {\n      case \"1\":\n        return gentlelaborer;\n      case \"2\":\n        return mayonnaise;\n      case \"3\":\n        return heartman;\n      case \"4\":\n        return imagination;\n      default:\n        console.log(\"default\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Spongebob Soundboard</h2>\n            <div>\n              <button id=\"1\" onClick={this.addSound}>1</button>\n              <button id=\"2\" onClick={this.addSound}>2</button>\n            </div>\n            <div>\n              <button id=\"3\" onClick={this.addSound}>3</button>\n              <button id=\"4\" onClick={this.addSound}>4</button>\n              <div id=\"sequence\">{this.state.sequence.map((i,j) => {\n                return (\n                  i + \" \"\n                )\n              })}\n              </div>\n              <div>\n                <button id=\"play\" onClick={this.play}>Play</button>\n                <button id=\"reset\" onClick={this.reset}>Reset</button>\n              </div>\n            </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}